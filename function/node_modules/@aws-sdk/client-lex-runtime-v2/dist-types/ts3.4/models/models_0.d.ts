
import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";
import { Readable } from "stream";

export interface AccessDeniedException extends __SmithyException, $MetadataBearer {
    name: "AccessDeniedException";
    $fault: "client";
    message: string | undefined;
}
export declare namespace AccessDeniedException {
    
    const filterSensitiveLog: (obj: AccessDeniedException) => any;
}

export interface ActiveContextTimeToLive {
    
    timeToLiveInSeconds: number | undefined;
    
    turnsToLive: number | undefined;
}
export declare namespace ActiveContextTimeToLive {
    
    const filterSensitiveLog: (obj: ActiveContextTimeToLive) => any;
}

export interface ActiveContext {
    
    name: string | undefined;
    
    timeToLive: ActiveContextTimeToLive | undefined;
    
    contextAttributes: {
        [key: string]: string;
    } | undefined;
}
export declare namespace ActiveContext {
    
    const filterSensitiveLog: (obj: ActiveContext) => any;
}

export interface AudioInputEvent {
    
    audioChunk?: Uint8Array;
    
    contentType: string | undefined;
    
    eventId?: string;
    
    clientTimestampMillis?: number;
}
export declare namespace AudioInputEvent {
    
    const filterSensitiveLog: (obj: AudioInputEvent) => any;
}

export interface AudioResponseEvent {
    
    audioChunk?: Uint8Array;
    
    contentType?: string;
    
    eventId?: string;
}
export declare namespace AudioResponseEvent {
    
    const filterSensitiveLog: (obj: AudioResponseEvent) => any;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    message: string | undefined;
}
export declare namespace ConflictException {
    
    const filterSensitiveLog: (obj: ConflictException) => any;
}
export interface DeleteSessionRequest {
    
    botId: string | undefined;
    
    botAliasId: string | undefined;
    
    localeId: string | undefined;
    
    sessionId: string | undefined;
}
export declare namespace DeleteSessionRequest {
    
    const filterSensitiveLog: (obj: DeleteSessionRequest) => any;
}
export interface DeleteSessionResponse {
    
    botId?: string;
    
    botAliasId?: string;
    
    localeId?: string;
    
    sessionId?: string;
}
export declare namespace DeleteSessionResponse {
    
    const filterSensitiveLog: (obj: DeleteSessionResponse) => any;
}

export interface InternalServerException extends __SmithyException, $MetadataBearer {
    name: "InternalServerException";
    $fault: "server";
    message: string | undefined;
}
export declare namespace InternalServerException {
    
    const filterSensitiveLog: (obj: InternalServerException) => any;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    message: string | undefined;
}
export declare namespace ResourceNotFoundException {
    
    const filterSensitiveLog: (obj: ResourceNotFoundException) => any;
}

export interface ThrottlingException extends __SmithyException, $MetadataBearer {
    name: "ThrottlingException";
    $fault: "client";
    message: string | undefined;
}
export declare namespace ThrottlingException {
    
    const filterSensitiveLog: (obj: ThrottlingException) => any;
}

export interface ValidationException extends __SmithyException, $MetadataBearer {
    name: "ValidationException";
    $fault: "client";
    message: string | undefined;
}
export declare namespace ValidationException {
    
    const filterSensitiveLog: (obj: ValidationException) => any;
}
export interface GetSessionRequest {
    
    botId: string | undefined;
    
    botAliasId: string | undefined;
    
    localeId: string | undefined;
    
    sessionId: string | undefined;
}
export declare namespace GetSessionRequest {
    
    const filterSensitiveLog: (obj: GetSessionRequest) => any;
}
export declare enum ConfirmationState {
    CONFIRMED = "Confirmed",
    DENIED = "Denied",
    NONE = "None"
}
export declare enum Shape {
    LIST = "List",
    SCALAR = "Scalar"
}

export interface Value {
    
    originalValue?: string;
    
    interpretedValue: string | undefined;
    
    resolvedValues?: string[];
}
export declare namespace Value {
    
    const filterSensitiveLog: (obj: Value) => any;
}
export declare enum IntentState {
    FAILED = "Failed",
    FULFILLED = "Fulfilled",
    FULFILLMENT_IN_PROGRESS = "FulfillmentInProgress",
    IN_PROGRESS = "InProgress",
    READY_FOR_FULFILLMENT = "ReadyForFulfillment",
    WAITING = "Waiting"
}

export interface ConfidenceScore {
    
    score?: number;
}
export declare namespace ConfidenceScore {
    
    const filterSensitiveLog: (obj: ConfidenceScore) => any;
}
export declare enum SentimentType {
    MIXED = "MIXED",
    NEGATIVE = "NEGATIVE",
    NEUTRAL = "NEUTRAL",
    POSITIVE = "POSITIVE"
}

export interface SentimentScore {
    
    positive?: number;
    
    negative?: number;
    
    neutral?: number;
    
    mixed?: number;
}
export declare namespace SentimentScore {
    
    const filterSensitiveLog: (obj: SentimentScore) => any;
}

export interface SentimentResponse {
    
    sentiment?: SentimentType | string;
    
    sentimentScore?: SentimentScore;
}
export declare namespace SentimentResponse {
    
    const filterSensitiveLog: (obj: SentimentResponse) => any;
}
export declare enum MessageContentType {
    CUSTOM_PAYLOAD = "CustomPayload",
    IMAGE_RESPONSE_CARD = "ImageResponseCard",
    PLAIN_TEXT = "PlainText",
    SSML = "SSML"
}

export interface Button {
    
    text: string | undefined;
    
    value: string | undefined;
}
export declare namespace Button {
    
    const filterSensitiveLog: (obj: Button) => any;
}

export interface ImageResponseCard {
    
    title: string | undefined;
    
    subtitle?: string;
    
    imageUrl?: string;
    
    buttons?: Button[];
}
export declare namespace ImageResponseCard {
    
    const filterSensitiveLog: (obj: ImageResponseCard) => any;
}

export interface Message {
    
    content?: string;
    
    contentType: MessageContentType | string | undefined;
    
    imageResponseCard?: ImageResponseCard;
}
export declare namespace Message {
    
    const filterSensitiveLog: (obj: Message) => any;
}
export declare enum StyleType {
    DEFAULT = "Default",
    SPELL_BY_LETTER = "SpellByLetter",
    SPELL_BY_WORD = "SpellByWord"
}
export declare enum DialogActionType {
    CLOSE = "Close",
    CONFIRM_INTENT = "ConfirmIntent",
    DELEGATE = "Delegate",
    ELICIT_INTENT = "ElicitIntent",
    ELICIT_SLOT = "ElicitSlot",
    NONE = "None"
}

export interface DialogAction {
    
    type: DialogActionType | string | undefined;
    
    slotToElicit?: string;
    
    slotElicitationStyle?: StyleType | string;
}
export declare namespace DialogAction {
    
    const filterSensitiveLog: (obj: DialogAction) => any;
}

export interface BadGatewayException extends __SmithyException, $MetadataBearer {
    name: "BadGatewayException";
    $fault: "server";
    message: string | undefined;
}
export declare namespace BadGatewayException {
    
    const filterSensitiveLog: (obj: BadGatewayException) => any;
}

export interface DependencyFailedException extends __SmithyException, $MetadataBearer {
    name: "DependencyFailedException";
    $fault: "client";
    message: string | undefined;
}
export declare namespace DependencyFailedException {
    
    const filterSensitiveLog: (obj: DependencyFailedException) => any;
}
export interface PutSessionResponse {
    
    contentType?: string;
    
    messages?: string;
    
    sessionState?: string;
    
    requestAttributes?: string;
    
    sessionId?: string;
    
    audioStream?: Readable | ReadableStream | Blob;
}
export declare namespace PutSessionResponse {
    
    const filterSensitiveLog: (obj: PutSessionResponse) => any;
}
export interface RecognizeUtteranceRequest {
    
    botId: string | undefined;
    
    botAliasId: string | undefined;
    
    localeId: string | undefined;
    
    sessionId: string | undefined;
    
    sessionState?: string;
    
    requestAttributes?: string;
    
    requestContentType: string | undefined;
    