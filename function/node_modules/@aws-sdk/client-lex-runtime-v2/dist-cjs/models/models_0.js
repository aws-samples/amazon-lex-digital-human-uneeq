"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutSessionRequest = exports.ConfigurationEvent = exports.SessionState = exports.Interpretation = exports.Intent = exports.Slot = exports.TranscriptEvent = exports.TextResponseEvent = exports.PlaybackInterruptionEvent = exports.PlaybackInterruptionReason = exports.InputMode = exports.HeartbeatEvent = exports.TextInputEvent = exports.PlaybackCompletionEvent = exports.DTMFInputEvent = exports.DisconnectionEvent = exports.ConversationMode = exports.RecognizeUtteranceResponse = exports.RecognizeUtteranceRequest = exports.PutSessionResponse = exports.DependencyFailedException = exports.BadGatewayException = exports.DialogAction = exports.DialogActionType = exports.StyleType = exports.Message = exports.ImageResponseCard = exports.Button = exports.MessageContentType = exports.SentimentResponse = exports.SentimentScore = exports.SentimentType = exports.ConfidenceScore = exports.IntentState = exports.Value = exports.Shape = exports.ConfirmationState = exports.GetSessionRequest = exports.ValidationException = exports.ThrottlingException = exports.ResourceNotFoundException = exports.InternalServerException = exports.DeleteSessionResponse = exports.DeleteSessionRequest = exports.ConflictException = exports.AudioResponseEvent = exports.AudioInputEvent = exports.ActiveContext = exports.ActiveContextTimeToLive = exports.AccessDeniedException = void 0;
exports.StartConversationResponse = exports.StartConversationResponseEventStream = exports.RecognizeTextResponse = exports.IntentResultEvent = exports.GetSessionResponse = exports.StartConversationRequest = exports.StartConversationRequestEventStream = exports.RecognizeTextRequest = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
var AccessDeniedException;
(function (AccessDeniedException) {
    AccessDeniedException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(AccessDeniedException = exports.AccessDeniedException || (exports.AccessDeniedException = {}));
var ActiveContextTimeToLive;
(function (ActiveContextTimeToLive) {
    ActiveContextTimeToLive.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ActiveContextTimeToLive = exports.ActiveContextTimeToLive || (exports.ActiveContextTimeToLive = {}));
var ActiveContext;
(function (ActiveContext) {
    ActiveContext.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.contextAttributes && { contextAttributes: smithy_client_1.SENSITIVE_STRING }),
    });
})(ActiveContext = exports.ActiveContext || (exports.ActiveContext = {}));
var AudioInputEvent;
(function (AudioInputEvent) {
    AudioInputEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(AudioInputEvent = exports.AudioInputEvent || (exports.AudioInputEvent = {}));
var AudioResponseEvent;
(function (AudioResponseEvent) {
    AudioResponseEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(AudioResponseEvent = exports.AudioResponseEvent || (exports.AudioResponseEvent = {}));
var ConflictException;
(function (ConflictException) {
    ConflictException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ConflictException = exports.ConflictException || (exports.ConflictException = {}));
var DeleteSessionRequest;
(function (DeleteSessionRequest) {
    DeleteSessionRequest.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DeleteSessionRequest = exports.DeleteSessionRequest || (exports.DeleteSessionRequest = {}));
var DeleteSessionResponse;
(function (DeleteSessionResponse) {
    DeleteSessionResponse.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DeleteSessionResponse = exports.DeleteSessionResponse || (exports.DeleteSessionResponse = {}));
var InternalServerException;
(function (InternalServerException) {
    InternalServerException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(InternalServerException = exports.InternalServerException || (exports.InternalServerException = {}));
var ResourceNotFoundException;
(function (ResourceNotFoundException) {
    ResourceNotFoundException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ResourceNotFoundException = exports.ResourceNotFoundException || (exports.ResourceNotFoundException = {}));
var ThrottlingException;
(function (ThrottlingException) {
    ThrottlingException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ThrottlingException = exports.ThrottlingException || (exports.ThrottlingException = {}));
var ValidationException;
(function (ValidationException) {
    ValidationException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ValidationException = exports.ValidationException || (exports.ValidationException = {}));
var GetSessionRequest;
(function (GetSessionRequest) {
    GetSessionRequest.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(GetSessionRequest = exports.GetSessionRequest || (exports.GetSessionRequest = {}));
var ConfirmationState;
(function (ConfirmationState) {
    ConfirmationState["CONFIRMED"] = "Confirmed";
    ConfirmationState["DENIED"] = "Denied";
    ConfirmationState["NONE"] = "None";
})(ConfirmationState = exports.ConfirmationState || (exports.ConfirmationState = {}));
var Shape;
(function (Shape) {
    Shape["LIST"] = "List";
    Shape["SCALAR"] = "Scalar";
})(Shape = exports.Shape || (exports.Shape = {}));
var Value;
(function (Value) {
    Value.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(Value = exports.Value || (exports.Value = {}));
var IntentState;
(function (IntentState) {
    IntentState["FAILED"] = "Failed";
    IntentState["FULFILLED"] = "Fulfilled";
    IntentState["FULFILLMENT_IN_PROGRESS"] = "FulfillmentInProgress";
    IntentState["IN_PROGRESS"] = "InProgress";
    IntentState["READY_FOR_FULFILLMENT"] = "ReadyForFulfillment";
    IntentState["WAITING"] = "Waiting";
})(IntentState = exports.IntentState || (exports.IntentState = {}));
var ConfidenceScore;
(function (ConfidenceScore) {
    ConfidenceScore.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ConfidenceScore = exports.ConfidenceScore || (exports.ConfidenceScore = {}));
var SentimentType;
(function (SentimentType) {
    SentimentType["MIXED"] = "MIXED";
    SentimentType["NEGATIVE"] = "NEGATIVE";
    SentimentType["NEUTRAL"] = "NEUTRAL";
    SentimentType["POSITIVE"] = "POSITIVE";
})(SentimentType = exports.SentimentType || (exports.SentimentType = {}));
var SentimentScore;
(function (SentimentScore) {
    SentimentScore.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(SentimentScore = exports.SentimentScore || (exports.SentimentScore = {}));
var SentimentResponse;
(function (SentimentResponse) {
    SentimentResponse.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(SentimentResponse = exports.SentimentResponse || (exports.SentimentResponse = {}));
var MessageContentType;
(function (MessageContentType) {
    MessageContentType["CUSTOM_PAYLOAD"] = "CustomPayload";
    MessageContentType["IMAGE_RESPONSE_CARD"] = "ImageResponseCard";
    MessageContentType["PLAIN_TEXT"] = "PlainText";
    MessageContentType["SSML"] = "SSML";
})(MessageContentType = exports.MessageContentType || (exports.MessageContentType = {}));
var Button;
(function (Button) {
    Button.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(Button = exports.Button || (exports.Button = {}));
var ImageResponseCard;
(function (ImageResponseCard) {
    ImageResponseCard.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(ImageResponseCard = exports.ImageResponseCard || (exports.ImageResponseCard = {}));
var Message;
(function (Message) {
    Message.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.content && { content: smithy_client_1.SENSITIVE_STRING }),
    });
})(Message = exports.Message || (exports.Message = {}));
var StyleType;
(function (StyleType) {
    StyleType["DEFAULT"] = "Default";
    StyleType["SPELL_BY_LETTER"] = "SpellByLetter";
    StyleType["SPELL_BY_WORD"] = "SpellByWord";
})(StyleType = exports.StyleType || (exports.StyleType = {}));
var DialogActionType;
(function (DialogActionType) {
    DialogActionType["CLOSE"] = "Close";
    DialogActionType["CONFIRM_INTENT"] = "ConfirmIntent";
    DialogActionType["DELEGATE"] = "Delegate";
    DialogActionType["ELICIT_INTENT"] = "ElicitIntent";
    DialogActionType["ELICIT_SLOT"] = "ElicitSlot";
    DialogActionType["NONE"] = "None";
})(DialogActionType = exports.DialogActionType || (exports.DialogActionType = {}));
var DialogAction;
(function (DialogAction) {
    DialogAction.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DialogAction = exports.DialogAction || (exports.DialogAction = {}));
var BadGatewayException;
(function (BadGatewayException) {
    BadGatewayException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(BadGatewayException = exports.BadGatewayException || (exports.BadGatewayException = {}));
var DependencyFailedException;
(function (DependencyFailedException) {
    DependencyFailedException.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DependencyFailedException = exports.DependencyFailedException || (exports.DependencyFailedException = {}));
var PutSessionResponse;
(function (PutSessionResponse) {
    PutSessionResponse.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(PutSessionResponse = exports.PutSessionResponse || (exports.PutSessionResponse = {}));
var RecognizeUtteranceRequest;
(function (RecognizeUtteranceRequest) {
    RecognizeUtteranceRequest.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.sessionState && { sessionState: smithy_client_1.SENSITIVE_STRING }),
        ...(obj.requestAttributes && { requestAttributes: smithy_client_1.SENSITIVE_STRING }),
    });
})(RecognizeUtteranceRequest = exports.RecognizeUtteranceRequest || (exports.RecognizeUtteranceRequest = {}));
var RecognizeUtteranceResponse;
(function (RecognizeUtteranceResponse) {
    RecognizeUtteranceResponse.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(RecognizeUtteranceResponse = exports.RecognizeUtteranceResponse || (exports.RecognizeUtteranceResponse = {}));
var ConversationMode;
(function (ConversationMode) {
    ConversationMode["AUDIO"] = "AUDIO";
    ConversationMode["TEXT"] = "TEXT";
})(ConversationMode = exports.ConversationMode || (exports.ConversationMode = {}));
var DisconnectionEvent;
(function (DisconnectionEvent) {
    DisconnectionEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(DisconnectionEvent = exports.DisconnectionEvent || (exports.DisconnectionEvent = {}));
var DTMFInputEvent;
(function (DTMFInputEvent) {
    DTMFInputEvent.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.inputCharacter && { inputCharacter: smithy_client_1.SENSITIVE_STRING }),
    });
})(DTMFInputEvent = exports.DTMFInputEvent || (exports.DTMFInputEvent = {}));
var PlaybackCompletionEvent;
(function (PlaybackCompletionEvent) {
    PlaybackCompletionEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(PlaybackCompletionEvent = exports.PlaybackCompletionEvent || (exports.PlaybackCompletionEvent = {}));
var TextInputEvent;
(function (TextInputEvent) {
    TextInputEvent.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.text && { text: smithy_client_1.SENSITIVE_STRING }),
    });
})(TextInputEvent = exports.TextInputEvent || (exports.TextInputEvent = {}));
var HeartbeatEvent;
(function (HeartbeatEvent) {
    HeartbeatEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(HeartbeatEvent = exports.HeartbeatEvent || (exports.HeartbeatEvent = {}));
var InputMode;
(function (InputMode) {
    InputMode["DTMF"] = "DTMF";
    InputMode["SPEECH"] = "Speech";
    InputMode["TEXT"] = "Text";
})(InputMode = exports.InputMode || (exports.InputMode = {}));
var PlaybackInterruptionReason;
(function (PlaybackInterruptionReason) {
    PlaybackInterruptionReason["DTMF_START_DETECTED"] = "DTMF_START_DETECTED";
    PlaybackInterruptionReason["TEXT_DETECTED"] = "TEXT_DETECTED";
    PlaybackInterruptionReason["VOICE_START_DETECTED"] = "VOICE_START_DETECTED";
})(PlaybackInterruptionReason = exports.PlaybackInterruptionReason || (exports.PlaybackInterruptionReason = {}));
var PlaybackInterruptionEvent;
(function (PlaybackInterruptionEvent) {
    PlaybackInterruptionEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(PlaybackInterruptionEvent = exports.PlaybackInterruptionEvent || (exports.PlaybackInterruptionEvent = {}));
var TextResponseEvent;
(function (TextResponseEvent) {
    TextResponseEvent.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),
    });
})(TextResponseEvent = exports.TextResponseEvent || (exports.TextResponseEvent = {}));
var TranscriptEvent;
(function (TranscriptEvent) {
    TranscriptEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(TranscriptEvent = exports.TranscriptEvent || (exports.TranscriptEvent = {}));
var Slot;
(function (Slot) {
    Slot.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(Slot = exports.Slot || (exports.Slot = {}));
var Intent;
(function (Intent) {
    Intent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(Intent = exports.Intent || (exports.Intent = {}));
var Interpretation;
(function (Interpretation) {
    Interpretation.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(Interpretation = exports.Interpretation || (exports.Interpretation = {}));
var SessionState;
(function (SessionState) {
    SessionState.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.activeContexts && {
            activeContexts: obj.activeContexts.map((item) => ActiveContext.filterSensitiveLog(item)),
        }),
    });
})(SessionState = exports.SessionState || (exports.SessionState = {}));
var ConfigurationEvent;
(function (ConfigurationEvent) {
    ConfigurationEvent.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.welcomeMessages && {
            welcomeMessages: obj.welcomeMessages.map((item) => Message.filterSensitiveLog(item)),
        }),
    });
})(ConfigurationEvent = exports.ConfigurationEvent || (exports.ConfigurationEvent = {}));
var PutSessionRequest;
(function (PutSessionRequest) {
    PutSessionRequest.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),
    });
})(PutSessionRequest = exports.PutSessionRequest || (exports.PutSessionRequest = {}));
var RecognizeTextRequest;
(function (RecognizeTextRequest) {
    RecognizeTextRequest.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.text && { text: smithy_client_1.SENSITIVE_STRING }),
    });
})(RecognizeTextRequest = exports.RecognizeTextRequest || (exports.RecognizeTextRequest = {}));
var StartConversationRequestEventStream;
(function (StartConversationRequestEventStream) {
    StartConversationRequestEventStream.visit = (value, visitor) => {
        if (value.ConfigurationEvent !== undefined)
            return visitor.ConfigurationEvent(value.ConfigurationEvent);
        if (value.AudioInputEvent !== undefined)
            return visitor.AudioInputEvent(value.AudioInputEvent);
        if (value.DTMFInputEvent !== undefined)
            return visitor.DTMFInputEvent(value.DTMFInputEvent);
        if (value.TextInputEvent !== undefined)
            return visitor.TextInputEvent(value.TextInputEvent);
        if (value.PlaybackCompletionEvent !== undefined)
            return visitor.PlaybackCompletionEvent(value.PlaybackCompletionEvent);
        if (value.DisconnectionEvent !== undefined)
            return visitor.DisconnectionEvent(value.DisconnectionEvent);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    StartConversationRequestEventStream.filterSensitiveLog = (obj) => {
        if (obj.ConfigurationEvent !== undefined)
            return { ConfigurationEvent: ConfigurationEvent.filterSensitiveLog(obj.ConfigurationEvent) };
        if (obj.AudioInputEvent !== undefined)
            return { AudioInputEvent: AudioInputEvent.filterSensitiveLog(obj.AudioInputEvent) };
        if (obj.DTMFInputEvent !== undefined)
            return { DTMFInputEvent: DTMFInputEvent.filterSensitiveLog(obj.DTMFInputEvent) };
        if (obj.TextInputEvent !== undefined)
            return { TextInputEvent: TextInputEvent.filterSensitiveLog(obj.TextInputEvent) };
        if (obj.PlaybackCompletionEvent !== undefined)
            return { PlaybackCompletionEvent: PlaybackCompletionEvent.filterSensitiveLog(obj.PlaybackCompletionEvent) };
        if (obj.DisconnectionEvent !== undefined)
            return { DisconnectionEvent: DisconnectionEvent.filterSensitiveLog(obj.DisconnectionEvent) };
        if (obj.$unknown !== undefined)
            return { [obj.$unknown[0]]: "UNKNOWN" };
    };
})(StartConversationRequestEventStream = exports.StartConversationRequestEventStream || (exports.StartConversationRequestEventStream = {}));
var StartConversationRequest;
(function (StartConversationRequest) {
    StartConversationRequest.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.requestEventStream && { requestEventStream: "STREAMING_CONTENT" }),
    });
})(StartConversationRequest = exports.StartConversationRequest || (exports.StartConversationRequest = {}));
var GetSessionResponse;
(function (GetSessionResponse) {
    GetSessionResponse.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),
    });
})(GetSessionResponse = exports.GetSessionResponse || (exports.GetSessionResponse = {}));
var IntentResultEvent;
(function (IntentResultEvent) {
    IntentResultEvent.filterSensitiveLog = (obj) => ({
        ...obj,
    });
})(IntentResultEvent = exports.IntentResultEvent || (exports.IntentResultEvent = {}));
var RecognizeTextResponse;
(function (RecognizeTextResponse) {
    RecognizeTextResponse.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.messages && { messages: obj.messages.map((item) => Message.filterSensitiveLog(item)) }),
    });
})(RecognizeTextResponse = exports.RecognizeTextResponse || (exports.RecognizeTextResponse = {}));
var StartConversationResponseEventStream;
(function (StartConversationResponseEventStream) {
    StartConversationResponseEventStream.visit = (value, visitor) => {
        if (value.PlaybackInterruptionEvent !== undefined)
            return visitor.PlaybackInterruptionEvent(value.PlaybackInterruptionEvent);
        if (value.TranscriptEvent !== undefined)
            return visitor.TranscriptEvent(value.TranscriptEvent);
        if (value.IntentResultEvent !== undefined)
            return visitor.IntentResultEvent(value.IntentResultEvent);
        if (value.TextResponseEvent !== undefined)
            return visitor.TextResponseEvent(value.TextResponseEvent);
        if (value.AudioResponseEvent !== undefined)
            return visitor.AudioResponseEvent(value.AudioResponseEvent);
        if (value.HeartbeatEvent !== undefined)
            return visitor.HeartbeatEvent(value.HeartbeatEvent);
        if (value.AccessDeniedException !== undefined)
            return visitor.AccessDeniedException(value.AccessDeniedException);
        if (value.ResourceNotFoundException !== undefined)
            return visitor.ResourceNotFoundException(value.ResourceNotFoundException);
        if (value.ValidationException !== undefined)
            return visitor.ValidationException(value.ValidationException);
        if (value.ThrottlingException !== undefined)
            return visitor.ThrottlingException(value.ThrottlingException);
        if (value.InternalServerException !== undefined)
            return visitor.InternalServerException(value.InternalServerException);
        if (value.ConflictException !== undefined)
            return visitor.ConflictException(value.ConflictException);
        if (value.DependencyFailedException !== undefined)
            return visitor.DependencyFailedException(value.DependencyFailedException);
        if (value.BadGatewayException !== undefined)
            return visitor.BadGatewayException(value.BadGatewayException);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    StartConversationResponseEventStream.filterSensitiveLog = (obj) => {
        if (obj.PlaybackInterruptionEvent !== undefined)
            return { PlaybackInterruptionEvent: PlaybackInterruptionEvent.filterSensitiveLog(obj.PlaybackInterruptionEvent) };
        if (obj.TranscriptEvent !== undefined)
            return { TranscriptEvent: TranscriptEvent.filterSensitiveLog(obj.TranscriptEvent) };
        if (obj.IntentResultEvent !== undefined)
            return { IntentResultEvent: IntentResultEvent.filterSensitiveLog(obj.IntentResultEvent) };
        if (obj.TextResponseEvent !== undefined)
            return { TextResponseEvent: TextResponseEvent.filterSensitiveLog(obj.TextResponseEvent) };
        if (obj.AudioResponseEvent !== undefined)
            return { AudioResponseEvent: AudioResponseEvent.filterSensitiveLog(obj.AudioResponseEvent) };
        if (obj.HeartbeatEvent !== undefined)
            return { HeartbeatEvent: HeartbeatEvent.filterSensitiveLog(obj.HeartbeatEvent) };
        if (obj.AccessDeniedException !== undefined)
            return { AccessDeniedException: AccessDeniedException.filterSensitiveLog(obj.AccessDeniedException) };
        if (obj.ResourceNotFoundException !== undefined)
            return { ResourceNotFoundException: ResourceNotFoundException.filterSensitiveLog(obj.ResourceNotFoundException) };
        if (obj.ValidationException !== undefined)
            return { ValidationException: ValidationException.filterSensitiveLog(obj.ValidationException) };
        if (obj.ThrottlingException !== undefined)
            return { ThrottlingException: ThrottlingException.filterSensitiveLog(obj.ThrottlingException) };
        if (obj.InternalServerException !== undefined)
            return { InternalServerException: InternalServerException.filterSensitiveLog(obj.InternalServerException) };
        if (obj.ConflictException !== undefined)
            return { ConflictException: ConflictException.filterSensitiveLog(obj.ConflictException) };
        if (obj.DependencyFailedException !== undefined)
            return { DependencyFailedException: DependencyFailedException.filterSensitiveLog(obj.DependencyFailedException) };
        if (obj.BadGatewayException !== undefined)
            return { BadGatewayException: BadGatewayException.filterSensitiveLog(obj.BadGatewayException) };
        if (obj.$unknown !== undefined)
            return { [obj.$unknown[0]]: "UNKNOWN" };
    };
})(StartConversationResponseEventStream = exports.StartConversationResponseEventStream || (exports.StartConversationResponseEventStream = {}));
var StartConversationResponse;
(function (StartConversationResponse) {
    StartConversationResponse.filterSensitiveLog = (obj) => ({
        ...obj,
        ...(obj.responseEventStream && { responseEventStream: "STREAMING_CONTENT" }),
    });
})(StartConversationResponse = exports.StartConversationResponse || (exports.StartConversationResponse = {}));
